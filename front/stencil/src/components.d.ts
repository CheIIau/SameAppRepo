/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Post } from "./types/posts";
import { Todo } from "./types/todos";
export { Post } from "./types/posts";
export { Todo } from "./types/todos";
export namespace Components {
    interface AboutPage {
    }
    interface CartComponent {
    }
    interface HeaderComponent {
    }
    interface HomePage {
    }
    interface InputComponent {
        "name"?: string;
        "value": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PostItem {
        "post": Post;
        "showFooter": boolean;
    }
    interface PostPage {
    }
    interface PostsFooter {
    }
    interface PostsPage {
    }
    interface StencilApp {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface TodoItem {
        "todo": Todo;
    }
    interface TodoList {
        "todos": Todo[];
    }
    interface TodosPage {
    }
}
export interface InputComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInputComponentElement;
}
export interface TodoItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTodoItemElement;
}
export interface TodoListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTodoListElement;
}
declare global {
    interface HTMLAboutPageElement extends Components.AboutPage, HTMLStencilElement {
    }
    var HTMLAboutPageElement: {
        prototype: HTMLAboutPageElement;
        new (): HTMLAboutPageElement;
    };
    interface HTMLCartComponentElement extends Components.CartComponent, HTMLStencilElement {
    }
    var HTMLCartComponentElement: {
        prototype: HTMLCartComponentElement;
        new (): HTMLCartComponentElement;
    };
    interface HTMLHeaderComponentElement extends Components.HeaderComponent, HTMLStencilElement {
    }
    var HTMLHeaderComponentElement: {
        prototype: HTMLHeaderComponentElement;
        new (): HTMLHeaderComponentElement;
    };
    interface HTMLHomePageElement extends Components.HomePage, HTMLStencilElement {
    }
    var HTMLHomePageElement: {
        prototype: HTMLHomePageElement;
        new (): HTMLHomePageElement;
    };
    interface HTMLInputComponentElementEventMap {
        "changeValue": string;
    }
    interface HTMLInputComponentElement extends Components.InputComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInputComponentElementEventMap>(type: K, listener: (this: HTMLInputComponentElement, ev: InputComponentCustomEvent<HTMLInputComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInputComponentElementEventMap>(type: K, listener: (this: HTMLInputComponentElement, ev: InputComponentCustomEvent<HTMLInputComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInputComponentElement: {
        prototype: HTMLInputComponentElement;
        new (): HTMLInputComponentElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPostItemElement extends Components.PostItem, HTMLStencilElement {
    }
    var HTMLPostItemElement: {
        prototype: HTMLPostItemElement;
        new (): HTMLPostItemElement;
    };
    interface HTMLPostPageElement extends Components.PostPage, HTMLStencilElement {
    }
    var HTMLPostPageElement: {
        prototype: HTMLPostPageElement;
        new (): HTMLPostPageElement;
    };
    interface HTMLPostsFooterElement extends Components.PostsFooter, HTMLStencilElement {
    }
    var HTMLPostsFooterElement: {
        prototype: HTMLPostsFooterElement;
        new (): HTMLPostsFooterElement;
    };
    interface HTMLPostsPageElement extends Components.PostsPage, HTMLStencilElement {
    }
    var HTMLPostsPageElement: {
        prototype: HTMLPostsPageElement;
        new (): HTMLPostsPageElement;
    };
    interface HTMLStencilAppElement extends Components.StencilApp, HTMLStencilElement {
    }
    var HTMLStencilAppElement: {
        prototype: HTMLStencilAppElement;
        new (): HTMLStencilAppElement;
    };
    interface HTMLTodoItemElementEventMap {
        "deleteTodo": string;
        "saveTodo": { id: string; text: string };
    }
    interface HTMLTodoItemElement extends Components.TodoItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTodoItemElementEventMap>(type: K, listener: (this: HTMLTodoItemElement, ev: TodoItemCustomEvent<HTMLTodoItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTodoItemElementEventMap>(type: K, listener: (this: HTMLTodoItemElement, ev: TodoItemCustomEvent<HTMLTodoItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTodoItemElement: {
        prototype: HTMLTodoItemElement;
        new (): HTMLTodoItemElement;
    };
    interface HTMLTodoListElementEventMap {
        "deleteTodo": string;
        "saveTodo": { id: string; text: string };
    }
    interface HTMLTodoListElement extends Components.TodoList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTodoListElementEventMap>(type: K, listener: (this: HTMLTodoListElement, ev: TodoListCustomEvent<HTMLTodoListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTodoListElementEventMap>(type: K, listener: (this: HTMLTodoListElement, ev: TodoListCustomEvent<HTMLTodoListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTodoListElement: {
        prototype: HTMLTodoListElement;
        new (): HTMLTodoListElement;
    };
    interface HTMLTodosPageElement extends Components.TodosPage, HTMLStencilElement {
    }
    var HTMLTodosPageElement: {
        prototype: HTMLTodosPageElement;
        new (): HTMLTodosPageElement;
    };
    interface HTMLElementTagNameMap {
        "about-page": HTMLAboutPageElement;
        "cart-component": HTMLCartComponentElement;
        "header-component": HTMLHeaderComponentElement;
        "home-page": HTMLHomePageElement;
        "input-component": HTMLInputComponentElement;
        "my-component": HTMLMyComponentElement;
        "post-item": HTMLPostItemElement;
        "post-page": HTMLPostPageElement;
        "posts-footer": HTMLPostsFooterElement;
        "posts-page": HTMLPostsPageElement;
        "stencil-app": HTMLStencilAppElement;
        "todo-item": HTMLTodoItemElement;
        "todo-list": HTMLTodoListElement;
        "todos-page": HTMLTodosPageElement;
    }
}
declare namespace LocalJSX {
    interface AboutPage {
    }
    interface CartComponent {
    }
    interface HeaderComponent {
    }
    interface HomePage {
    }
    interface InputComponent {
        "name"?: string;
        "onChangeValue"?: (event: InputComponentCustomEvent<string>) => void;
        "value"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PostItem {
        "post"?: Post;
        "showFooter"?: boolean;
    }
    interface PostPage {
    }
    interface PostsFooter {
    }
    interface PostsPage {
    }
    interface StencilApp {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface TodoItem {
        "onDeleteTodo"?: (event: TodoItemCustomEvent<string>) => void;
        "onSaveTodo"?: (event: TodoItemCustomEvent<{ id: string; text: string }>) => void;
        "todo"?: Todo;
    }
    interface TodoList {
        "onDeleteTodo"?: (event: TodoListCustomEvent<string>) => void;
        "onSaveTodo"?: (event: TodoListCustomEvent<{ id: string; text: string }>) => void;
        "todos"?: Todo[];
    }
    interface TodosPage {
    }
    interface IntrinsicElements {
        "about-page": AboutPage;
        "cart-component": CartComponent;
        "header-component": HeaderComponent;
        "home-page": HomePage;
        "input-component": InputComponent;
        "my-component": MyComponent;
        "post-item": PostItem;
        "post-page": PostPage;
        "posts-footer": PostsFooter;
        "posts-page": PostsPage;
        "stencil-app": StencilApp;
        "todo-item": TodoItem;
        "todo-list": TodoList;
        "todos-page": TodosPage;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "about-page": LocalJSX.AboutPage & JSXBase.HTMLAttributes<HTMLAboutPageElement>;
            "cart-component": LocalJSX.CartComponent & JSXBase.HTMLAttributes<HTMLCartComponentElement>;
            "header-component": LocalJSX.HeaderComponent & JSXBase.HTMLAttributes<HTMLHeaderComponentElement>;
            "home-page": LocalJSX.HomePage & JSXBase.HTMLAttributes<HTMLHomePageElement>;
            "input-component": LocalJSX.InputComponent & JSXBase.HTMLAttributes<HTMLInputComponentElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "post-item": LocalJSX.PostItem & JSXBase.HTMLAttributes<HTMLPostItemElement>;
            "post-page": LocalJSX.PostPage & JSXBase.HTMLAttributes<HTMLPostPageElement>;
            "posts-footer": LocalJSX.PostsFooter & JSXBase.HTMLAttributes<HTMLPostsFooterElement>;
            "posts-page": LocalJSX.PostsPage & JSXBase.HTMLAttributes<HTMLPostsPageElement>;
            "stencil-app": LocalJSX.StencilApp & JSXBase.HTMLAttributes<HTMLStencilAppElement>;
            "todo-item": LocalJSX.TodoItem & JSXBase.HTMLAttributes<HTMLTodoItemElement>;
            "todo-list": LocalJSX.TodoList & JSXBase.HTMLAttributes<HTMLTodoListElement>;
            "todos-page": LocalJSX.TodosPage & JSXBase.HTMLAttributes<HTMLTodosPageElement>;
        }
    }
}
